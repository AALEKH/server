/* Tell GCC  this is a header file */#ifdef USE_PRAGMA_INTERFACE#pragma interface#endif/* The csv lines could be big. Read them in blocks of 512. */#define csv_READ_BLOCK_SIZE   512struct csv_INFO{  char fname[FN_REFLEN+1];  int fd;};class ha_recachesql: public handler{protected:  /* Low-level storage engine data. */  csv_INFO* file;  /* Lock structures for the table lock manager. */  THR_LOCK_DATA lock;  THR_LOCK thr_lock;  /* Table scan cursor.*/  my_off_t pos;  /* Buffer for reading csv line blocks. */  char read_buf[csv_READ_BLOCK_SIZE];  /* Buffer for parsing the field values. */  String field_buf;  /* See the comment in the implementation file. */  int fetch_line(byte* buf);  /* Initializes the storage engine object for a sequential scan. */  int rnd_init(bool scan) {    pos = 0;    records = 0;    return 0;  }  int index_init(uint idx) {    active_index=idx;    return 0;  }public:  ha_recachesql(TABLE_SHARE* table_arg);  ~ha_recachesql() {}  int open(const char *name, int mode, uint test_if_locked);  int close(void);  int rnd_next(byte *buf);  int rnd_pos(byte * buf, byte *pos);  void position(const byte *record);  void info(uint flags);  int external_lock(THD *thd, int lock_type); const char **bas_ext() const;  ulong table_flags(void) const;  ulong index_flags(uint idx, uint part, bool all_parts) const;  int create(const char *name, TABLE *form, HA_CREATE_INFO *info);  THR_LOCK_DATA **store_lock(THD *thd, THR_LOCK_DATA **to, enum thr_lock_type lock_type);  const char *table_type() const { return "RECACHESQL_csv"; }  };