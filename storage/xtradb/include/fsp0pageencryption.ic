/*****************************************************************************

Copyright (C) 2013,2014 SkySQL Ab. All Rights Reserved.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; version 2 of the License.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

*****************************************************************************/

/******************************************************************//**
@file include/fsp0pageencryption.ic
Implementation for helper functions for encrypting/decrypting pages
and atomic writes information to file space.

Created 08/28/2014 Florin Fugaciu
***********************************************************************/

#include "fsp0fsp.h"




/********************************************************************//**
Determine if the tablespace is page encrypted from dict_table_t::flags.
@return	TRUE if page encrypted, FALSE if not page encrypted */
UNIV_INLINE
ibool
fsp_flags_is_page_encrypted(
/*=========================*/
	ulint	flags)	/*!< in: tablespace flags */
{
	return(FSP_FLAGS_GET_PAGE_ENCRYPTION(flags));
}

/********************************************************************//**
Extract the page encryption key from tablespace flags.
A tablespace has only one physical page encryption key
whether that page is encrypted or not.
@return	page encryption key of the file-per-table tablespace,
or zero if the table is not encrypted.  */
UNIV_INLINE
ulint
fsp_flags_get_page_encryption_key(
/*=================================*/
	ulint	flags)	/*!< in: tablespace flags */
{
	return(FSP_FLAGS_GET_PAGE_ENCRYPTION_KEY(flags));
}


/*******************************************************************//**
Returns the page encryption flag of the space, or false if the space
is not encrypted. The tablespace must be cached in the memory cache.
@return	true if page encrypted, false if not or space not found */
UNIV_INLINE
ibool
fil_space_is_page_encrypted(
/*=========================*/
    ulint   id)	/*!< in: space id */
{
	ulint	flags;

	flags = fil_space_get_flags(id);

	if (flags && flags != ULINT_UNDEFINED) {

		return(fsp_flags_is_page_encrypted(flags));
	}

	return(flags);
}


/********************************************************************//**
Determine the tablespace is using atomic writes from dict_table_t::flags.
@return	true if atomic writes is used, false if not * /read_
UNIV_INLINE
atomic_writes_t
fsp_flags_get_atomic_writes(
/*========================* /
    ulint	flags)	/*!< in: tablespace flags * /
{
    return((atomic_writes_t)FSP_FLAGS_GET_ATOMIC_WRITES(flags));
}*/

/*******************************************************************//**
Find out wheather the page is index page or not
@return	true if page type index page, false if not * /
UNIV_INLINE
ibool
fil_page_is_index_page(
/*===================* /
    byte *buf)	/*!< in: page * /
{
    return(mach_read_from_2(buf+FIL_PAGE_TYPE) == FIL_PAGE_INDEX);
}*/

/*******************************************************************//**
Find out whether the page is page encrypted
@return	true if page is page encrypted, false if not */
UNIV_INLINE
ibool
fil_page_is_encrypted(
/*===================*/
    const byte *buf)	/*!< in: page */
{
    //ibool result = FALSE;
    ibool result = TRUE;
    return(mach_read_from_2(buf+FIL_PAGE_TYPE) == FIL_PAGE_PAGE_ENCRYPTED);
    //return(result);
}
